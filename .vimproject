scout-camp=/$PWD filter="*" {
 bin=bin {
  scout-camp
 }
 lib=lib {
  scout-camp.rb
  scout=scout {
   aws=aws{
    s3.rb
   }
   terraform_dsl.rb
   terraform_dsl=terraform_dsl {
    deployment.rb
    util.rb
   }
   offsite.rb
   offsite=offsite {
    exceptions.rb
    ssh.rb
    step.rb
    sync.rb
    resource.rb
   }

   render=render{
    resource.rb
    helpers.rb
    engine.rb
   }
   render.rb

   sinatra=sinatra{
    entity.rb

    base=base{
     helpers.rb
     post_processing.rb
     assets.rb
     headers.rb
     parameters.rb
     session.rb
    }
    base.rb

    fragment.rb
    workflow.rb
    auth.rb
    finder.rb
    knowledge_base.rb
    tool.rb
   }
  }
 }
 scout_commands=scout_commands {
  find
  offsite
  sync
  terraform=terraform{
   apply
   destroy
   lambda_task
   list
   outputs
   plan
   remove
   status
   task
   add=add{
    lambda
    relay
   }
  }
 }
 share=share {
  terraform=terraform {
   aws=aws {
    event_bridge=event_bridge{
     main.tf
     data.tf
     variables.tf
    }

    lambda=lambda {
     main.tf
     variables.tf
    }

    fargate=fargate{
     main.tf
     variables.tf
     locals.tf
     output.tf
    }

    efs_host=efs_host{
     main.tf
     variables.tf
     locals.tf
     data.tf
     output.tf
    }

    efs=efs{
     main.tf
     variables.tf
     data.tf
     locals.tf
     output.tf
    }

    network=network{
     data.tf
     main.tf
     variables.tf
     output.tf
    }

    bucket=bucket {
     main.tf
     output.tf
     variables.tf
    }

    container_lambda=container_lambda{
     main.tf
     data.tf
     locals.tf
     variables.tf
    }

    role=role{
     main.tf
     variables.tf
     output.tf
    }
    
    policy=policy{
     main.tf
     variables.tf
     output.tf
    }

    role_policy=role_policy{
     main.tf
     variables.tf
    }

    policy_attachment=policy_attachment {
     main.tf
     variables.tf
    }

    iam_instance_profile=iam_instance_profile{
     main.tf
     variables.tf
     output.tf
    }

    cluster=cluster {
     main.tf
     output.tf
     variables.tf
    }
    host=host {
     locals.tf
     main.tf
     output.tf
     variables.tf
    }
    provider=provider {
     data.tf
     output.tf
    }
   }
   ssh=ssh{
    cmd=cmd{
     main.tf
     variables.tf
    }
    ollama=ollama{
     main.tf
     variables.tf
    }
    vllm=vllm{
     main.tf
     variables.tf
    }
    relay=relay{

    }
   }
  }
  aws=aws{
   lambda_function.rb
  }
 }
 test=test {
  test_helper.rb
  scout=scout {
   test_terraform_dsl.rb
   offsite=offsite {
    test_ssh.rb
    test_step.rb
    test_sync.rb
   }
  }
 }
 LICENSE
 README.md
 Rakefile
 VERSION
}
